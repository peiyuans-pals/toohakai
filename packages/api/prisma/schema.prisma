// Prisma schema

// Database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator
generator client {
  provider = "prisma-client-js"
}

// User
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id           String         @id
  firstLoginAt DateTime       @default(now())
  lastLoginAt  DateTime       @default(now())
  role         UserRole       @default(STUDENT)
  QuestionBank QuestionBank[]
  Quiz         Quiz[]
}

// Questions
model QuestionBank {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  title     String     @db.VarChar(255)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  questions Question[]
  Quiz      Quiz[]
}

model Question {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String       @db.VarChar(255)
  answers        Answer[]
  QuestionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionBankId Int
}

model Answer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  isCorrect  Boolean
  Question   Question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionId Int
}

// Quiz
enum QuizStatus {
  NOT_STARTED
  ONGOING
  ENDED
}

model Quiz {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String       @db.VarChar(255)
  status         QuizStatus   @default(NOT_STARTED)
  author         User         @relation(fields: [authorId], references: [id])
  authorId       String
  QuestionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionBankId Int
}
