// Prisma schema

// Database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

// User
enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

model User {
  id              String            @id
  firstLoginAt    DateTime          @default(now())
  lastLoginAt     DateTime          @default(now())
  role            UserRole          @default(STUDENT)
  QuestionBank    QuestionBank[]
  Quiz            Quiz[]
  QuizParticipant QuizParticipant[]
}

// Questions
model QuestionBank {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  title     String     @db.VarChar(255)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  questions Question[]
  Quiz      Quiz[]
}

model Question {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String       @db.VarChar(255)
  answers        Answer[]
  QuestionBank   QuestionBank @relation(fields: [questionBankId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionBankId Int
  Quiz           Quiz[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String
  isCorrect  Boolean
  Question   Question @relation(fields: [questionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionId Int
}

// Quiz
enum QuizStatus {
  NOT_STARTED
  CANCELLED
  ONGOING
  ENDED
}

enum QuizParticipantConnectionStatus {
  CONNECTED
  DISCONNECTED
}

model QuizParticipant {
  joinedAt         DateTime                        @default(now())
  connectionStatus QuizParticipantConnectionStatus
  Quiz             Quiz                            @relation(fields: [quizId], references: [id])
  quizId           Int
  User             User                            @relation(fields: [userId], references: [id])
  userId           String

  @@unique([quizId, userId]) // https://flaviocopes.com/prisma-multiple-fields-unique-key/
}

model Quiz {
  id                         Int               @id @default(autoincrement())
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  title                      String            @db.VarChar(255)
  status                     QuizStatus        @default(NOT_STARTED)
  startTime                  DateTime?
  endTime                    DateTime?
  numOfQuestions             Int
  timePerQuestion            Int // in seconds
  author                     User              @relation(fields: [authorId], references: [id])
  authorId                   String
  QuestionBank               QuestionBank      @relation(fields: [questionBankId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  questionBankId             Int
  pinCode                    String
  participants               QuizParticipant[]
  currentQuestion            Question?         @relation(fields: [currentQuestionId], references: [id])
  currentQuestionId          Int?
  currentQuestionStartTime   DateTime?
  currentQuestionReviewTime  DateTime?
  currentQuestionReviewPause Boolean?
}
